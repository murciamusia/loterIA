// index.js (versi√≥n CommonJS)
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const participantes = new Map();

// /start - Mensaje de bienvenida
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `¬°Hola ${msg.from.first_name}! üëã\n\nUsa /apuntar para participar en la pr√≥xima jugada.\nUsa /ayuda para ver todos los comandos.`,
    { parse_mode: "Markdown" }
  );
});

bot.onText(/\/apuntar/, (msg) => {
  const userId = msg.from.id;
  if (participantes.has(userId)) {
    bot.sendMessage(msg.chat.id, 'Ya est√°s apuntado.');
  } else {
    participantes.set(userId, {
      nombre: msg.from.first_name,
      username: msg.from.username || '',
    });
    bot.sendMessage(msg.chat.id, '¬°Te has apuntado con √©xito!');
  }
});


// /baja - Elimina usuario
bot.onText(/\/baja/, (msg) => {
  const userId = msg.from.id;
  if (participantes.has(userId)) {
    participantes.delete(userId);
    bot.sendMessage(msg.chat.id, 'Te has dado de baja.');
  } else {
    bot.sendMessage(msg.chat.id, 'No estabas apuntado.');
  }
});

// Comando /participantes
bot.onText(/\/participantes/, (msg) => {
  if (participantes.size === 0) {
    bot.sendMessage(msg.chat.id, 'A√∫n no hay participantes.');
    return;
  }

  const lista = Array.from(participantes.values())
    .map((p, i) => `${i + 1}. ${p.nombre} ${p.username ? `(@${p.username})` : ''}`)
    .join('\n');

  bot.sendMessage(msg.chat.id, `üë• Participantes:\n${lista}`);
});

// /combinacion - Muestra combinaci√≥n del d√≠a
bot.onText(/\/combinacion/, (msg) => {
  bot.sendMessage(msg.chat.id, `üé∞ Combinaci√≥n generada por IA para hoy:\n\n12 - 23 - 34 - 36 - 44 - 49`);
});

// /resultados - Enlace a resultados
bot.onText(/\/resultados/, (msg) => {
  bot.sendMessage(msg.chat.id, `üìä Consulta los √∫ltimos resultados oficiales de la Bonoloto aqu√≠:\nhttps://www.loteriasyapuestas.es/es/bonoloto`);
});

// /ayuda - Comandos
bot.onText(/\/ayuda/, (msg) => {
  bot.sendMessage(msg.chat.id, `üìã *Comandos disponibles*:

/start - Bienvenida
/apuntar - Apuntarte a la pr√≥xima jugada
/baja - Salir de la pe√±a
/participantes - Ver qui√©n est√° apuntado
/combinacion - Ver la combinaci√≥n del d√≠a
/resultados - Ver √∫ltimos resultados
/bases - Reglas y bases de participaci√≥n
/ayuda - Este men√∫

¬°Gracias por usar *loterIA*! ü§ñ`, { parse_mode: "Markdown" });
});

const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL, // A√±ade esta variable en Render o Railway
  ssl: {
    rejectUnauthorized: false
  }
});

// /bases - Reglas y condiciones de participaci√≥n
bot.onText(/\/bases/, (msg) => {
  const texto = `üìú *Bases de Participaci√≥n ‚Äì Pe√±a "loterIA"* üìú

1. *Organizaci√≥n*
- Pe√±a sin √°nimo de lucro gestionada por Juan Antonio Garc√≠a.
- Objetivo: participar colectivamente en la Bonoloto usando combinaciones generadas por IA.

2. *Cuota de participaci√≥n*
- 3‚Ç¨ cuota de alta en la pe√±a o reactivaci√≥n.
- 5‚Ç¨ por semana para las apuestas. Pago antes del *viernes a las 14:00h* para las apuestas de la pr√≥xima semana.
- Bizum al n√∫mero: \`617988897\` con el concepto: *Tu nombre o @usuario + fecha de pago*.

3. *Confirmaci√≥n*
- El administrador confirmar√° tu pago y te incluir√° en el sorteo semanal, confirmar participaci√≥n con el comando /apuntar.
- Usa /pagos para ver qui√©n ha pagado.

4. *Combinaciones*
- Generadas autom√°ticamente con IA y publicadas en el grupo antes del sorteo.

5. *Premios*
- Se reparten proporcionalmente seg√∫n la participaci√≥n semanal.
- Se abonan por Bizum tras confirmar el premio *solo premios menores*.

6. *Transparencia*
- Combinaciones y premios se comparten p√∫blicamente.
- Puedes solicitar desglose de premios o aportaciones.

7. *Renovaci√≥n*
- La participaci√≥n es semanal. No hay compromiso de permanencia.

8. *Cancelaci√≥n*
- Puedes salir con /baja o contactar con el administrador.

¬°Gracias por formar parte de *loterIA*! ü§ñüçÄ`;

  bot.sendMessage(msg.chat.id, texto, { parse_mode: "Markdown" });
});

bot.onText(/\/pago/, (msg) => {
  const mensaje = `üí∏ *Informaci√≥n de pago para participar en la pe√±a "loterIA"* üí∏

üìå Para participar en la pr√≥xima jugada de Bonoloto gestionada por *loterIA*, es necesario realizar el pago antes del *viernes a las 14:00h*.

‚úÖ *Cuota por participante:*
5‚Ç¨ por jugada semanal

üí≥ *M√©todos de pago:*
1. *Bizum:* \`617988897\` (Juan Antonio Garc√≠a)
   - Concepto: *Tu nombre o usuario de Telegram + fecha*

‚úÖ Una vez realizado el pago, se te confirmar√° la participaci√≥n.

üßæ *Transparencia:*
- Las combinaciones jugadas se compartir√°n en el chat.
- Los premios ser√°n repartidos proporcionalmente.
- Consulta la lista de participantes con /participantes

üì© Dudas: contacta con administrador o usa /ayuda.

¬°Gracias por confiar en *loterIA*! ü§ñüçÄ`;

  bot.sendMessage(msg.chat.id, mensaje, { parse_mode: "Markdown" });
});

// Comando separado: /confirmar_pago
bot.onText(/\/confirmar_pago (.+)/, async (msg, match) => {
  const adminId = 2132105874; // ‚Üê tu ID real de Telegram aqu√≠

  if (msg.from.id !== adminId) {
    return bot.sendMessage(msg.chat.id, "‚õî Solo el administrador puede registrar pagos.");
  }

  const usernameOId = match[1].trim();
  const participante = Array.from(participantes.entries()).find(([id, p]) =>
    String(id) === usernameOId || p.username === usernameOId.replace('@', '')
  );

  if (!participante) {
    return bot.sendMessage(msg.chat.id, "‚ùå Usuario no encontrado entre los participantes.");
  }

  const [telegram_id, { nombre, username }] = participante;

  try {
    await pool.query(
      'INSERT INTO pagos (telegram_id, nombre, username, cantidad) VALUES ($1, $2, $3, $4)',
      [telegram_id, nombre, username, 5.00]
    );

    bot.sendMessage(msg.chat.id, `‚úÖ Pago confirmado para *${nombre}* (@${username || "sin usuario"})`, {
      parse_mode: "Markdown"
    });

  } catch (err) {
    console.error("Error registrando pago:", err);
    bot.sendMessage(msg.chat.id, "‚ö†Ô∏è Ocurri√≥ un error al registrar el pago.");
  }
});
